# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  #
  # YOU NEED TO ADD A BOX THAT WILL BE NAMED AND REFERENCED BELOW !!!
  # vagrant box add https://github.com/holms/vagrant-centos7-box/releases/download/7.1.1503.001/CentOS-7.1.1503-x86_64-netboot.box --name CentOS-7.1.1503-x86_64
  #
  config.vm.box = "CentOS-7.1.1503-x86_64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  #config.vm.network "forwarded_port", guest: 3000, host: 3000
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 9393, host: 9393
  config.vm.network "forwarded_port", guest: 9889, host: 9889
  #config.vm.network "forwarded_port", guest: 61616, host: 61616
  #config.vm.network "forwarded_port", guest: 27017, host: 27017

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
    vb.cpus=2 #recommended=4 if available
    vb.memory = "2048" #recommended=3072 or 4096 if available
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: <<-SHELL


  #TODO if you need to get through a proxy for yum and other utilities...
  #export http_proxy=http://host.com:port/
  #export https_proxy=http://host.com:port/
  #export HTTP_PROXY=http://host.com:port/
  #export HTTPS_PROXY=http://host.com:port/
  #sudo echo "proxy=http://host.com:port/" >> /etc/yum.conf
  #sed -i "/# System wide functions and aliases/a export HTTP_PROXY=$HTTP_PROXY\\nexport HTTPS_PROXY=$HTTP_PROXY\\nexport http_proxy=$HTTP_PROXY\\nexport https_proxy=$HTTP_PROXY" /etc/bashrc

  #check out code
  su - vagrant -c 'git clone https://github.com/petergdoyle/estreaming.git'

  #make sure the distro is up to date
  yum update -y

  #make sure virtualbox guest-additions are up to date
  service vboxdrv setup

  #install oracle jdk 7
  wget --no-check-certificate https://gist.githubusercontent.com/petergdoyle/c60903823a21847ee5c6/raw/6b1fffe26cc6efc8f1f718b190292ca578e8f0f2/equip_centos7_java7_64.sh && bash equip_centos7_java7_64.sh

  #install maven
  wget --no-check-certificate https://gist.githubusercontent.com/petergdoyle/42a988fbb07ad0e7ca99/raw/b39ed2274650bdc8f7158d5545a230e658c58929/equip_centos7_maven3_64.sh && bash equip_centos7_maven3_64.sh

  #install spring xd
  #wget -q -O - packages.pivotal.io | sh  #http://blog.pivotal.io/pivotal/products/easy-pivotal-app-installs-rpm-deb-msi-brew-chef-puppet-and-more
  #yum install spring-xd
  wget https://repo.spring.io/libs-release-local/org/springframework/xd/spring-xd/1.1.2.RELEASE/spring-xd-1.1.2.RELEASE-1.noarch.rpm
  yum -y localinstall spring-xd-1.1.2.RELEASE-1.noarch.rpm
  alternatives --install /usr/bin/xd-admin xd-admin /opt/pivotal/spring-xd/xd/bin/xd-admin 99999
  alternatives --install /usr/bin/xd-container xd-container /opt/pivotal/spring-xd/xd/bin/xd-container 99999
  alternatives --install /usr/bin/xd-singlenode xd-singlenode /opt/pivotal/spring-xd/xd/bin/xd-singlenode 99999
  rm spring-xd-1.1.2.RELEASE-1.noarch.rpm
  ln -s /home/vagrant/estreaming/groovy/airshop_csv_to_json_transform.groovy /opt/pivotal/spring-xd/xd/modules/processor/scripts/airshop_csv_to_json_transform.groovy

  #install spring boot
  #install gvm first
  yum -y install unzip
  su - vagrant -c 'curl -s get.gvmtool.net | bash'
  su - vagrant -c 'source "/home/vagrant/.gvm/bin/gvm-init.sh"'
  printf "gvm_auto_answer=true\ngvm_auto_selfupdate=true\n" > /home/vagrant/.gvm/etc/config
  su - vagrant -c 'gvm install springboot'
  #su - vagrant -c 'gvm install groovy'     #optional
  #su - vagrant -c 'gvm install grails'     #optional
  su - vagrant -c 'spring --version'

  #install mongodb and start it and enable it at startup
  wget --no-check-certificate https://gist.githubusercontent.com/petergdoyle/7451a7f694b20df709cc/raw/b01b001478b40fc52f333b0ff9f9cb7ac2a25ac7/mongodb.repo
  mv mongodb.repo /etc/yum.repos.d/
  yum -y install mongodb-org mongodb-org-server
  systemctl start mongod
  chkconfig mongod on
  systemctl status mongod
  mongo -version
  su - vagrant -c 'mongo < /home/vagrant/estreaming/mongo/setup'

  #install node.js and npm
  yum -y install epel-release gcc gcc-c++
  yum -y install nodejs npm
  #install express.js
  #TODO npm proxy settings if applicable
  #npm config set proxy $HTTP_PROXY
  #npm config set https-proxy $HTTP_PROXY
  npm install express -g
  npm install express-generator -g
  express -V
  #nice little utility to format a stream of json https://www.npmjs.com/package/format-json-stream
  npm install format-json-stream -g

  #install storm
  wget http://mirror.nexcess.net/apache/storm/apache-storm-0.9.5/apache-storm-0.9.5.tar.gz
  tar -xvf apache-storm-0.9.5.tar.gz
  mkdir -p /home/vagrant/storm
  mv apache-storm-0.9.5 /home/vagrant/storm
  ln -s /home/vagrant/storm/apache-storm-0.9.5 /home/vagrant/storm/default
  chown -R vagrant:vagrant /home/vagrant/storm
  rm -f apache-storm-0.9.5.tar.gz

  #install kafka
  wget --no-check-certificate http://apache.claz.org/kafka/0.8.2.1/kafka_2.9.1-0.8.2.1.tgz
  tar -xvf kafka_2.9.1-0.8.2.1.tgz
  mkdir -p /home/vagrant/kafka
  mv kafka_2.9.1-0.8.2.1 /home/vagrant/kafka
  ln -s /home/vagrant/kafka/kafka_2.9.1-0.8.2.1 /home/vagrant/kafka/default
  chown -R vagrant:vagrant /home/vagrant/kafka
  rm -f kafka_2.9.1-0.8.2.1.tgz

  #install X and xfce desktop Optional
  yum -y groupinstall "X Window System"
  yum -y groupinstall xfce
  yum -y install x2goserver-xsession
  yum -y install xfce4-terminal
  wget --no-check-certificate https://dl.orangedox.com/xCs7czovfGqWuOhBgm/crunchy-dark-grey.tar.gz
  tar -xvf crunchy-dark-grey.tar.gz
  mv crunchy-dark-grey /usr/share/themes
  #change to this theme using xfce4-appearance-settings 
  startx

  #install some helpful extras
  yum -y install firefox
  yum -y install htop
  yum -y install vim
  yum -y install gedit
  #atom text editor
  wget https://github.com/atom/atom/releases/download/v0.208.0/atom.x86_64.rpm
  yum -y localinstall -y atom.x86_64.rpm
  rm atom.x86_64.rpm

  #add aliases
  su - vagrant -c 'wget https://raw.githubusercontent.com/petergdoyle/estreaming/master/aliases'
  sed -i '/# User specific aliases and functions/a source aliases' /home/vagrant/.bashrc

  #add some symlinks
  su - vagrant -c 'ln -s /opt/pivotal/spring-xd/xd/config /home/vagrant/xd.config'
  su - vagrant -c 'ln -s /opt/pivotal/spring-xd/xd /home/vagrant/xd.home'
  su - vagrant -c 'ln -s /tmp/xd/output/ /home/vagrant/xd.out'
  su - vagrant -c 'ln -s /home/vagrant/estreaming/java/activemq-jms-sender/ /home/vagrant/xd.jms-sender'
  su - vagrant -c 'ln -s /opt/pivotal/spring-xd/xd/modules/processor/scripts/ /home/vagrant/xd.scripts'
  su - vagrant -c 'ln -s /home/vagrant/estreaming/node/ /home/vagrant/node'

  #a little more setup
  cd /home/vagrant/estreaming/java/activemq-jms-sender/
  su - vagrant -c 'mvn clean install'

  SHELL
end
